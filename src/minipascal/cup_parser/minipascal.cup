package minipascal.cup_parser;

import java_cup.runtime.*;
import java.util.List;
import minipascal.tree.*;

parser code {:
  public boolean ERROR = false;
  public Node root = null;

  public void syntax_error(Symbol s) {
    ERROR = true;
    List<Integer> expected = expected_token_ids();
    StringBuffer expStr = new StringBuffer();

    for (Integer id : expected) {
      if (id != 1) {
        expStr.append(sym.terminalNames[id] + " ");
      }
    }

    String msg = String.format(
      "Error de sintaxis en la linea %d, columna %d.\nNo se esperaba el token %s!\nSe esperaba uno de los siguientes: %s\n",
      s.left,
      s.right,
      sym.terminalNames[s.sym],
      expStr
    );
    System.err.println(msg);
  }

  public void unrecovered_syntax_error(Symbol s) {
    ERROR = true;
    System.err.println("No se puede recuperar del error!");
  }
:}

terminal FUNCTION;
terminal PROCEDURE;
terminal INTEGER;
terminal REAL;
terminal BOOLEAN;
terminal CHAR;
terminal STRING;
terminal PROGRAM;
terminal IF;
terminal THEN;
terminal ELSE;
terminal VAR;
terminal BEGIN;
terminal END;
terminal WHILE;
terminal DO;
terminal FOR;
terminal TO;
terminal REPEAT;
terminal UNTIL;
terminal FUNC_READ;
terminal FUNC_WRITE;
terminal ASIGNACION;
terminal PAR_IZQ;
terminal PAR_DER;
terminal COMA;
terminal PUNTO;
terminal PUNTOCOMA;
terminal DOSPUNTOS;
terminal NOT;
terminal OR;
terminal AND;
terminal TYPE;
terminal RECORD;
terminal BREAK;
terminal CONTINUE;
terminal String OP_RELACIONAL;
terminal String OP_SUMA;
terminal String OP_MULT;
terminal String ID;
terminal Double NUM_DOUBLE;
terminal Integer NUM_INTEGER;
terminal Character CONSTCHAR;
terminal String CONSTSTR;
terminal Boolean CONSTBOOL;
terminal Object NIL;
terminal String UNKNOWN;

non terminal S;
non terminal PROGRAM_BLOCK;
non terminal VAR_BLOCK;
non terminal VARS;
non terminal ARGS;
non terminal MAYBE_ARGS;
non terminal IDS;
non terminal VAR_TYPE;
non terminal FUNC_PROC_BLOCK;
non terminal FUNC_DECL;
non terminal PROC_DECL;
non terminal MAIN_BLOCK;
non terminal STMNT_FUNC;
non terminal STMNT_LIST;
non terminal STATEMENT;
non terminal COMPOUND_STATEMENT;
non terminal CONST_VAL;
non terminal EXPR;
non terminal SIMPLE_EXPR;
non terminal EXPR_LIST;
non terminal TERMINO;
non terminal FACTOR;
non terminal OPEN_STATEMENT;
non terminal CLOSED_STATEMENT;
non terminal SIMPLE_STATEMENT;
non terminal WHILE_BLOCK;
non terminal FOR_BLOCK;
non terminal REPEAT_BLOCK;
non terminal VARIABLE;
non terminal NEW_TYPE;
non terminal RECORD_BLOCK;
non terminal RECORD_DECL;
non terminal FIELDS;
non terminal PRIMITIVOS;
non terminal MAYBE_EXPR_LIST;
non terminal INICIO;

start with S;

S ::=
  INICIO: inicio
  {:
    System.out.println(inicio);
    root = (Node) inicio;
  :}
  ;

INICIO ::=
  PROGRAM_BLOCK: program
  RECORD_BLOCK: maybeRecords
  VAR_BLOCK: maybeVar
  FUNC_PROC_BLOCK: maybeFuncs
  MAIN_BLOCK: maybeMain
  {:
    // program es obligatorio, seria la raiz
    Node raiz = (NProgram) program;

    // var es opcional
    if (maybeVar != null) {
      raiz.add((NVars) maybeVar);
    }

    // records son opcionales
    if (maybeRecords != null) {
      raiz.add((NRecordList) maybeRecords);
    }

    // functions y procedures son opcionales
    if (maybeFuncs != null) {
      raiz.add((NFuncProcList) maybeFuncs);
    }

    // main
    raiz.add((NMain) maybeMain);

    RESULT = raiz;
  :}
  ;

PROGRAM_BLOCK ::=
  PROGRAM: program ID: id PUNTOCOMA
  {: RESULT = new NProgram(id); :}
  ;

RECORD_BLOCK ::=
  RECORD_DECL: record RECORD_BLOCK: maybeMore
  {:
    Node res = new NRecordList((Node) record);
    if (maybeMore != null) {
      res.join((NRecordList) maybeMore);
    }
    RESULT = res;
  :}
  |
  ;

RECORD_DECL ::=
  TYPE ID: id OP_RELACIONAL: maybeEq RECORD FIELDS: fields END PUNTOCOMA
  {:
    if ("=".equals(maybeEq)) {
      RESULT = new NRecord(new NID(id), (Node) fields);
    } else {
      System.err.println("Error en declaracion del record!");
      System.err.println("Se esperaba \"=\", se obtuvo \"" + maybeEq + "\".\n");
      ERROR = true;
    }
  :}
  | TYPE error PUNTOCOMA
  ;

FUNC_PROC_BLOCK ::=
  FUNC_DECL: func FUNC_PROC_BLOCK: maybeMore
  {:
    Node res = new NFuncProcList((Node) func);
    if (maybeMore != null) {
      res.join((NFuncProcList) maybeMore);
    }
    RESULT = res;
  :}
//  XXX no se piden en el proyecto
//  | PROC_DECL: proc FUNC_PROC_BLOCK: maybeMore
//  {:
//    Node res = new NFuncProcList((Node) proc);
//    if (maybeMore != null) {
//      res.join((NFuncProcList) maybeMore);
//    }
//    RESULT = res;
//  :}
  |
  | error FUNC_PROC_BLOCK
  ;

FUNC_DECL ::=
  FUNCTION ID: id PAR_IZQ MAYBE_ARGS: maybeArgs PAR_DER DOSPUNTOS VAR_TYPE: returnType PUNTOCOMA
  VAR_BLOCK: maybeVars
  COMPOUND_STATEMENT: maybeStmntList
  PUNTOCOMA
  {:
    // XXX sirve para el print del json
    ((Node) returnType).data = String.format("\"%s\"", (String) ((Node) returnType).data);
    RESULT = new NFunction(
      new NID(id),
      (Node) returnType,
      (Node) maybeArgs,
      (Node) maybeVars,
      (Node) maybeStmntList
    );
  :}
  ;

PROC_DECL ::=
  PROCEDURE ID: id PAR_IZQ MAYBE_ARGS: maybeArgs PAR_DER PUNTOCOMA
  VAR_BLOCK: maybeVars
  COMPOUND_STATEMENT: maybeStmntList
  PUNTOCOMA
  {:
    RESULT = new NProcedure(
      new NID(id),
      (Node) maybeArgs,
      (Node) maybeVars,
      (Node) maybeStmntList
    );
  :}
  ;

VAR_BLOCK ::=
  VAR VARS: vars
  {: RESULT = vars; :}
  |
  | VAR error
  ;

FIELDS ::=
  IDS: ids DOSPUNTOS PRIMITIVOS: type PUNTOCOMA FIELDS: moreFields
  {:
    Node res = new NFields((Node) type, (Node) ids);
    res.join((NFields) moreFields);
    RESULT = res;
  :}
  | IDS: ids DOSPUNTOS PRIMITIVOS: type PUNTOCOMA
  {: RESULT = new NFields((Node) type, (Node) ids); :}
  ;

VARS ::=
  IDS: ids DOSPUNTOS VAR_TYPE: type PUNTOCOMA VARS: moreVars
  {:
    Node res = new NVars((Node) type, (Node) ids);
    res.join((NVars) moreVars);
    RESULT = res;
  :}
  | IDS: ids DOSPUNTOS VAR_TYPE: type PUNTOCOMA
  {: RESULT = new NVars((Node) type, (Node) ids); :}
  ;

MAYBE_ARGS ::=
  ARGS: args
  {: RESULT = args; :}
  |
  ;

ARGS ::=
  IDS: ids DOSPUNTOS VAR_TYPE: type PUNTOCOMA ARGS: moreArgs
  {:
    Node res = new NArgs((Node) type, (Node) ids);
    res.join((NArgs) moreArgs);
    RESULT = res;
  :}
  | IDS: ids DOSPUNTOS VAR_TYPE: type
  {: RESULT = new NArgs((Node) type, (Node) ids); :}
  ;

IDS ::=
  ID: id COMA IDS: ids
  {:
    Node res = new NIDList(new NID(id));
    if (ids instanceof NIDList) {
      res.join((NIDList) ids);
    } else {
      res.add((Node) ids);
    }
    RESULT = res;
  :}
  | ID: id
  {: RESULT = new NID(id); :}
  ;

VAR_TYPE ::=
  PRIMITIVOS: prim
  {: RESULT = prim; :}
  | NEW_TYPE: newType
  {: RESULT = newType; :}
  ;

PRIMITIVOS ::=
  INTEGER
  {: RESULT = new NType("integer"); :}
  | BOOLEAN
  {: RESULT = new NType("boolean"); :}
  | CHAR
  {: RESULT = new NType("char"); :}
//  XXX no se piden en el proyecto
//  | REAL
//  {: RESULT = new NType("real"); :}
//  | STRING
//  {: RESULT = new NType("string"); :}
  ;

NEW_TYPE ::=
  ID: id
  {: RESULT = new NNewType(id); :}
  ;

MAIN_BLOCK ::=
  COMPOUND_STATEMENT: maybeStmntList PUNTO
  {: RESULT = new NMain((Node) maybeStmntList); :}
  ;

STMNT_LIST ::=
  STATEMENT: stmnt PUNTOCOMA STMNT_LIST: stmntList
  {:
    Node list = new NStmntList((Node) stmnt);
    if (stmntList != null) {
      list.join((NStmntList) stmntList);
    }
    RESULT = list;
  :}
  |
// XXX ???
//  | STATEMENT error STMNT_LIST
  ;

STMNT_FUNC ::=
  ID: id PAR_IZQ MAYBE_EXPR_LIST: maybeExprList PAR_DER
  {: RESULT = new NFuncCall(id, (Node) maybeExprList); :}
  | FUNC_READ PAR_IZQ VARIABLE: var PAR_DER
  {: RESULT = new NFuncRead((Node) var); :}
  | FUNC_WRITE PAR_IZQ CONSTSTR: string PAR_DER
  {: RESULT = new NFuncWrite(new NString(string)); :}
  | FUNC_WRITE PAR_IZQ CONSTSTR: string COMA VARIABLE: var PAR_DER
  {: RESULT = new NFuncWrite(new NString(string), (Node) var); :}
  ;

STATEMENT ::=
  | OPEN_STATEMENT: stmnt
  {: RESULT = stmnt; :}
  | IF EXPR: ifExpr THEN CLOSED_STATEMENT: thenStmnt ELSE CLOSED_STATEMENT: elseStmnt
  {: RESULT = new NIfElse((Node) ifExpr, (Node) thenStmnt, (Node) elseStmnt); :}
  | WHILE_BLOCK: w
  {: RESULT = w; :}
  | FOR_BLOCK: f
  {: RESULT = f; :}
  | REPEAT_BLOCK: r
  {: RESULT = r; :}
  | SIMPLE_STATEMENT: s
  {: RESULT = s; :}
  ;

COMPOUND_STATEMENT ::=
  BEGIN STMNT_LIST: stmntList END
  {:
    if (stmntList != null) {
      RESULT = new NBegin((Node) stmntList);
    }
  :}
  | BEGIN error
  ;

SIMPLE_STATEMENT ::=
  VARIABLE: var ASIGNACION EXPR: expr
  {: RESULT = new NAssign((Node) var, (Node) expr); :}
  | BREAK
  {: RESULT = new NBreak(); :}
  | CONTINUE
  {: RESULT = new NContinue(); :}
  | STMNT_FUNC: stmntFunc
  {: RESULT = stmntFunc; :}
  | COMPOUND_STATEMENT: c
  {: RESULT = c; :}
  ;

OPEN_STATEMENT ::=
  IF EXPR: ifExpr THEN STATEMENT: thenStmnt
  {: RESULT = new NIfElse((Node) ifExpr, (Node) thenStmnt); :}
  | IF EXPR: ifExpr THEN CLOSED_STATEMENT: thenStmnt ELSE OPEN_STATEMENT: elseStmnt
  {: RESULT = new NIfElse((Node) ifExpr, (Node) thenStmnt, (Node) elseStmnt); :}
  ;

CLOSED_STATEMENT ::=
  IF EXPR: ifExpr THEN CLOSED_STATEMENT: thenStmnt ELSE CLOSED_STATEMENT: elseStmnt
  {: RESULT = new NIfElse((Node) ifExpr, (Node) thenStmnt, (Node) elseStmnt); :}
  | SIMPLE_STATEMENT: simpleStmnt
  {: RESULT = simpleStmnt; :}
  ;

WHILE_BLOCK ::=
  WHILE EXPR: whileExpr DO STATEMENT: doStmnt
  {: RESULT = new NWhile((Node) whileExpr, (Node) doStmnt); :}
  | WHILE error STATEMENT
  ;

FOR_BLOCK ::=
  FOR ID: id ASIGNACION: asign EXPR: expr TO FACTOR: toFactor DO STATEMENT: doStmnt
  {: RESULT = new NFor(new NAssign(new NID(id), (Node) expr), (Node) toFactor, (Node) doStmnt); :}
  | FOR error STATEMENT
  ;

REPEAT_BLOCK ::=
  REPEAT STMNT_LIST: stmntList UNTIL EXPR: expr
  {: RESULT = new NRepeat((Node) stmntList, (Node) expr); :}
  | REPEAT STMNT_LIST error
  ;

EXPR_LIST ::=
  EXPR: expr COMA EXPR_LIST: exprList
  {:
    Node list = new NExprList((Node) expr);
    if (exprList instanceof NExprList) {
      list.join((NExprList) exprList);
    } else {
      list.add((Node) exprList);
    }
    RESULT = list;
  :}
  | EXPR: expr
  {: RESULT = expr; :}
  ;

MAYBE_EXPR_LIST ::=
    EXPR_LIST: exprList
    {: RESULT = exprList; :}
    |
    ;

EXPR ::=
  SIMPLE_EXPR: simpleExpr
  {: RESULT = simpleExpr; :}
  | SIMPLE_EXPR: simpleExpr1 OR SIMPLE_EXPR: simpleExpr2
  {: RESULT = new NOr((Node) simpleExpr1, (Node) simpleExpr2); :}
  | error
  ;

SIMPLE_EXPR ::=
  TERMINO: termino
  {: RESULT = termino; :}
  | OP_SUMA: op TERMINO: termino
  {: RESULT = new NSuma(op, (Node) termino); :}
  | SIMPLE_EXPR: simpleExpr OP_SUMA: op TERMINO: termino
  {: RESULT = new NSuma((Node) simpleExpr, op, (Node) termino); :}
  | TERMINO: termino1 AND TERMINO: termino2
  {: RESULT = new NAnd((Node) termino1, (Node) termino2); :}
  ;

TERMINO ::=
  FACTOR: factor
  {: RESULT = factor; :}
  | TERMINO: termino OP_MULT: op FACTOR: factor
  {: RESULT = new NMult((Node) termino, op, (Node) factor); :}
  | FACTOR: factor1 OP_RELACIONAL: op FACTOR: factor2
  {: RESULT = new NOpRel((Node) factor1, op, (Node) factor2); :}
  ;

FACTOR ::=
  VARIABLE: var
  {: RESULT = var; :}
  | STMNT_FUNC: stmntFunc
  {: RESULT = stmntFunc; :}
  | CONST_VAL: val
  {: RESULT = val; :}
  | PAR_IZQ EXPR: expr PAR_DER
  {: RESULT = expr; :}
  | NOT: n FACTOR: factor
  {: RESULT = new NNot((Node) factor); :}
  ;

VARIABLE ::=
  ID: id
  {: RESULT = new NID(id); :}
  | ID: var PUNTO ID: field
  {: RESULT = new NRecordField(new NID(var), new NID(field)); :}
  ;

CONST_VAL ::=
  NUM_INTEGER: num
  {: RESULT = new NInteger(num); :}
  | CONSTCHAR: constchar
  {: RESULT = new NChar(constchar); :}
  | CONSTSTR: string
  {: RESULT = new NString(string); :}
  | CONSTBOOL: bool
  {: RESULT = new NBool(bool); :}
//  XXX no se piden en el proyecto
//  | NUM_DOUBLE: num
//  {: RESULT = new NDouble(num); :}
//  | NIL: nil
//  {: RESULT = new NNil(); :}
  ;
